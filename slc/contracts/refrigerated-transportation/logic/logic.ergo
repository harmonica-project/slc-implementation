/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.pantheonsorbonne.rt

import org.accordproject.cicero.runtime.*
import org.accordproject.time.*

define function isContractNotEnded(contractStatus): Boolean {
    match contractStatus
        with Terminated then return false
        with Completed then return false
        else return true
}

contract RefrigeratedTransportation over RefrigeratedTransportationModel state InstanceState {
    clause init(): Response {
        set state InstanceState{
            signatureDatetime: now(),
            deliveryDatetime: dateTime("1970-01-01T00:00:00.000+00:00"),
            agreementDatetime: dateTime("1970-01-01T00:00:00.000+00:00"),
            contractStatus: InExecution,
            shipmentStatus: Awaiting,
            paymentDue: 0.0,
            lateShipmentEnforced: false
        };

        return Response{}
    }

    clause SetContractInLitigation(request: SetContractInLitigationRequest): Response {
        enforce(state.contractStatus != Litigation)
            else throw failure("Already in litigation");

        set state.contractStatus = Litigation;

        return Response{}
    }

    clause EndLitigation(request: EndLitigationRequest, newContractStatus: ContractStatus): Response {
        enforce(state.contractStatus = Litigation)
            else throw failure("Contract not in litigation");

        set state.contractStatus = newContractStatus;

        return Response{}
    }

    clause TemperatureExcess(request: TemperatureExcessRequest, temperature: Double) : TemperatureExcessResponse {
        enforce (temperature > contract.maxTemperature)
            else throw failure("Temperature conforms the specifications of the contract.");
        enforce (isContractNotEnded(state.contractStatus))
            else throw failure("Contract is terminated or completed: clauses are not enforceable anymore.");
        enforce (state.contractStatus != Litigation)
            else throw failure("Contract in litigation: resolve the conflict before calling clauses.");

        set state.shipmentStatus = Perished;
        set state.contractStatus = Terminated;
        
        return TemperatureExcessResponse{
            excess: temperature - contract.maxTemperature
        }
    }

    clause LateShipment(request: LateShipmentRequest): LateShipmentResponse {
        let diff = diffDurationAs(now(),state.signatureDatetime,~org.accordproject.time.TemporalUnit.days).amount;

        enforce (!state.lateShipmentEnforced)
            else throw failure("Clause already enforced.");
        enforce (diff > contract.daysToDelivery)
            else throw failure("Shipment is not late.");
        enforce (isContractNotEnded(state.contractStatus))
            else throw failure("Contract is terminated or completed: clauses are not enforceable anymore.");
        enforce (state.shipmentStatus = Accepted)
            else throw failure("Package has been accepted by the Buyer: this clause is impossible to enforce now.");
        enforce (state.contractStatus != Litigation)
            else throw failure("Contract in litigation: resolve the conflict before calling clauses.");

        set state.paymentDue = state.paymentDue + (contract.orderPrice * contract.lateDeliveryPenaltyRatio);
        set state.lateShipmentEnforced = true;

        return LateShipmentResponse{
            lateShipment: true,
            penaltyApplied: (contract.orderPrice * contract.lateDeliveryPenaltyRatio)
        }
    }

    clause ShipmentDelivered(request: ShipmentDeliveredRequest): Response {
        enforce (isContractNotEnded(state.contractStatus))
            else throw failure("Contract is terminated or completed: clauses are not enforceable anymore.");
        enforce (state.shipmentStatus != Delivered and state.shipmentStatus != Accepted)
            else throw failure("Shipment already delivered.");
        enforce (state.contractStatus != Litigation)
            else throw failure("Contract in litigation: resolve the conflict before calling clauses.");

        set state.shipmentStatus = Delivered;
        set state.deliveryDatetime = now();

        return Response{}
    }

    clause ShipmentAgreed(request: ShipmentAgreedRequest): Response {
        enforce (isContractNotEnded(state.contractStatus))
            else throw failure("Contract is terminated or completed: clauses are not enforceable anymore.");
        enforce (state.shipmentStatus != Accepted)
            else throw failure("Shipment already accepted.");
        enforce (state.contractStatus != Litigation)
            else throw failure("Contract in litigation: resolve the conflict before calling clauses.");

        set state.shipmentStatus = Accepted;
        set state.agreementDatetime = now();

        return Response{}
    }

    clause AutomaticAgreement(request: AutomaticAgreementRequest): AutomaticAgreementResponse {
        let diff = diffDurationAs(now(),state.deliveryDatetime,~org.accordproject.time.TemporalUnit.days).amount;

        enforce (isContractNotEnded(state.contractStatus))
            else throw failure("Contract is terminated or completed: clauses are not enforceable anymore.");
        enforce (state.contractStatus != Litigation)
            else throw failure("Contract in litigation: resolve the conflict before calling clauses.");
        enforce (state.shipmentStatus != Accepted)
            else throw failure("Shipment already accepted.");
        enforce (diff > contract.daysToAgreement)
            else throw failure("The Buyer still has time to agreed on the Goods delivered.");

        set state.shipmentStatus = Accepted;
        set state.agreementDatetime = now();

        return AutomaticAgreementResponse{
            automaticAgreement: true
        }
    }

    clause BuyerPayment(request: BuyerPaymentRequest, amount: Double): BuyerPaymentResponse {
        enforce((state.paymentDue - amount) > 0.0)
            else throw failure("Impossible payment: contract payment due under 0 if done");
        enforce (isContractNotEnded(state.contractStatus))
            else throw failure("Contract is terminated or completed: clauses are not enforceable anymore.");
        enforce (state.contractStatus != Litigation)
            else throw failure("Contract in litigation: resolve the conflict before calling clauses.");

        set state.paymentDue = state.paymentDue - amount;

        //if the package is accepted by the buyer and the remaining amount to pay is 0, the contract is Completed
        if state.shipmentStatus = Accepted and state.paymentDue = 0 then 
            set state.contractStatus = Completed;
            return BuyerPaymentResponse{
                amountPaid: amount
            }
        else
            return BuyerPaymentResponse{
                amountPaid: amount
            }
    }
}
